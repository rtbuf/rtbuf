#!/bin/sh
## rtbuf
## Copyright 2018-2023 kmx.io <contact@kmx.io>
##
## Permission is hereby granted to use this software excepted
## on Apple computers granted the above copyright notice and
## this permission paragraph are included in all copies and
## substantial portions of this software.
##
## THIS SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY GUARANTEE OF
## PURPOSE AND PERFORMANCE. IN NO EVENT WHATSOEVER SHALL THE
## AUTHOR BE CONSIDERED LIABLE FOR THE USE AND PERFORMANCE OF
## THIS SOFTWARE.

set -e

SRC_TOP="$(dirname "$PWD")"

. "${SRC_TOP}/config.subr"

. ./sources.sh

# Default config
CPPFLAGS="${CPPFLAGS:=}"
ENV_CFLAGS="${CFLAGS:=}"
DEFAULT_CFLAGS="-O2 -pipe -fPIC"
LDFLAGS="${LDFLAGS:=}"
LIBS="${LIBS:=-lm}"

# Common config for all targets
CFLAGS="$CFLAGS -W -Wall -Werror -std=c99 -pedantic"
CPPFLAGS="$CPPFLAGS -DRTBUF_LIBDIR=\\\"${RTBUF_LIBDIR}\\\""
CPPFLAGS="$CPPFLAGS -DVER=\\\"${VER}\\\""
config_asan
config_gnu
pkg_config libbsd-overlay
config_portaudio
config_sndio

# Address Sanitizer config
CFLAGS_ASAN="$CFLAGS -fsanitize=address -O1 -fno-omit-frame-pointer -g"
LDFLAGS_ASAN="$LDFLAGS"
LIBS_ASAN="$LIBS"
LIBS_ASAN="$LIBS_ASAN $SRC_TOP/librtbuf/librtbuf_asan.la"

# Coverage config
CFLAGS_COV="$CFLAGS -ftest-coverage -fprofile-arcs"
LDFLAGS_COV="$LDFLAGS"
LIBS_COV="$LIBS"
LIBS_COV="$LIBS_COV $SRC_TOP/librtbuf/librtbuf_cov.la"

# Debug config
CFLAGS_DEBUG="$CFLAGS -DDEBUG -O0 -ggdb"
LDFLAGS_DEBUG="$LDFLAGS"
LIBS_DEBUG="$LIBS"
LIBS_DEBUG="$LIBS_DEBUG $SRC_TOP/librtbuf/librtbuf_debug.la"

# Main config
if [ "x$ENV_CFLAGS" = "x" ]; then
    CFLAGS="$CFLAGS $DEFAULT_CFLAGS"
fi
CFLAGS="$CFLAGS -DNDEBUG"
LIBS="$LIBS"
LIBS="$LIBS $SRC_TOP/librtbuf/librtbuf.la"

echo "HAVE_ASAN = $HAVE_ASAN" >> ${CONFIG_MK}
echo "CPPFLAGS = $CPPFLAGS" >> ${CONFIG_MK}
echo "CFLAGS = $CFLAGS" >> ${CONFIG_MK}
echo "LDFLAGS = $LDFLAGS" >> ${CONFIG_MK}
echo "LIB_OBJECTS = $LIB_OBJECTS" >> ${CONFIG_MK}
echo "LIBS = $LIBS" >> ${CONFIG_MK}
echo >> ${CONFIG_MK}
echo "CFLAGS_ASAN = $CFLAGS_ASAN" >> ${CONFIG_MK}
echo "LDFLAGS_ASAN = $LDFLAGS_ASAN" >> ${CONFIG_MK}
echo "LIBS_ASAN = $LIBS_ASAN" >> ${CONFIG_MK}
echo >> ${CONFIG_MK}
echo "CFLAGS_COV = $CFLAGS_COV" >> ${CONFIG_MK}
echo "LDFLAGS_COV = $LDFLAGS_COV" >> ${CONFIG_MK}
echo "LIBS_COV = $LIBS_COV" >> ${CONFIG_MK}
echo >> ${CONFIG_MK}
echo "CFLAGS_DEBUG = $CFLAGS_DEBUG" >> ${CONFIG_MK}
echo "LDFLAGS_DEBUG = $LDFLAGS_DEBUG" >> ${CONFIG_MK}
echo "LIBS_DEBUG = $LIBS_DEBUG" >> ${CONFIG_MK}

if [ "x$HAVE_SNDIO" != "xYes" ]; then
    DIRS="$(echo "$DIRS" | grep -v sndio)"
fi

if [ "x$HAVE_PORTAUDIO" != "xYes" ]; then
    DIRS="$(echo "$DIRS" | grep -v portaudio)"
fi

TYPES=
type_prog music
if [ "x$HAVE_PORTAUDIO" = "xYes" ]; then
    type_prog portaudio
fi
type_prog reverb
type_prog signal
if [ "x$HAVE_SNDIO" = "xYes" ]; then
    type_prog sndio
fi
type_prog synth

echo "types:${TYPES}" >> ${CONFIG_MK}

LIBRARIES=
LIBRARIES_DEBUG=

for SRC in $SOURCES; do
    SRC_LO="$(c2ext .main.lo "$SRC")"
    echo >> ${CONFIG_MK}
    ext_rule .main.lo "$SRC" >> ${CONFIG_MK}
    echo "	${LIBTOOL} --tag=CC --mode=compile \${CC} \${CPPFLAGS} \${CFLAGS} -c $SRC -o $SRC_LO" >> ${CONFIG_MK}

    SRC_LA="librtbuf_$(c2la "$SRC")"
    echo >> ${CONFIG_MK}
    echo "$SRC_LA: $SRC_LO" >> ${CONFIG_MK}
    echo "	${LIBTOOL} --tag=CC --mode=link \${CC} -shared \${LDFLAGS} $SRC_LO \${LIBS} -o $SRC_LA -rpath \${LIBDIR}" >> ${CONFIG_MK}
    LIBRARIES="$LIBRARIES $SRC_LA"

    SRC_LO="$(c2ext .debug.lo "$SRC")"
    echo >> ${CONFIG_MK}
    ext_rule .debug.lo "$SRC" >> ${CONFIG_MK}
    echo "	${LIBTOOL} --tag=CC --mode=compile \${CC} \${CPPFLAGS} \${CFLAGS_DEBUG} -c $SRC -o $SRC_LO" >> ${CONFIG_MK}

    SRC_LA="librtbuf_$(c2ext _debug.la "$SRC")"
    echo >> ${CONFIG_MK}
    echo "$SRC_LA: $SRC_LO" >> ${CONFIG_MK}
    echo "	${LIBTOOL} --tag=CC --mode=link \${CC} -shared \${LDFLAGS_DEBUG} $SRC_LO \${LIBS_DEBUG} -o $SRC_LA -rpath \${LIBDIR}" >> ${CONFIG_MK}
    LIBRARIES_DEBUG="$LIBRARIES_DEBUG $SRC_LA"
done

echo >> ${CONFIG_MK}
echo "libraries:${LIBRARIES} ${TYPES}" >> ${CONFIG_MK}

echo >> ${CONFIG_MK}
echo "libraries-debug:${LIBRARIES_DEBUG} ${TYPES}" >> ${CONFIG_MK}

echo >> ${CONFIG_MK}
echo "libraries-install: ${LIBRARIES}" >> ${CONFIG_MK}
for LIB in $LIBRARIES; do
    echo "	\${LIBTOOL} --tag=CC --mode=install \${INSTALL} -o \${OWNER} -g \${GROUP} -m 0755 $LIB \${LIBDIR}" >> ${CONFIG_MK}
done

echo >> ${CONFIG_MK}
echo "subdirs: ${TYPES}" >> ${CONFIG_MK}
for DIR in $DIRS; do
    echo "	\${MAKE} -C $DIR" >> ${CONFIG_MK}
done

echo >> ${CONFIG_MK}
echo "subdirs-clean:" >> ${CONFIG_MK}
for DIR in $DIRS; do
    echo "	\${MAKE} -C $DIR clean" >> ${CONFIG_MK}
done

echo >> ${CONFIG_MK}
echo "subdirs-debug:" >> ${CONFIG_MK}
for DIR in $DIRS; do
    echo "	\${MAKE} -C $DIR debug" >> ${CONFIG_MK}
done

echo >> ${CONFIG_MK}
echo "subdirs-install: libraries" >> ${CONFIG_MK}
for DIR in $DIRS; do
    echo "	\${MAKE} -C $DIR install" >> ${CONFIG_MK}
done

for DIR in $DIRS; do
    (cd $DIR && ./configure)
done

for TYPE_SRC in $TYPE_SOURCES; do
    TYPE_PROG="$(c2prog "$TYPE_SRC")"
    TYPE_H="${TYPE_PROG}.h"
    rm "$TYPE_H"
done

echo >> ${CONFIG_MK}
echo ".PHONY: types libraries libraries-debug install subdirs subdirs-clean subdirs-debug subdirs-install" >> ${CONFIG_MK}

update_config_mk
