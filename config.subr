#!/bin/sh
## rtbuf
## Copyright 2018-2023 kmx.io <contact@kmx.io>
##
## Permission is hereby granted to use this software excepted
## on Apple computers granted the above copyright notice and
## this permission paragraph are included in all copies and
## substantial portions of this software.
##
## THIS SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY GUARANTEE OF
## PURPOSE AND PERFORMANCE. IN NO EVENT WHATSOEVER SHALL THE
## AUTHOR BE CONSIDERED LIABLE FOR THE USE AND PERFORMANCE OF
## THIS SOFTWARE.

set -e

echo "$(echo "$PWD/" | sed -e "s|^${SRC_TOP}/||")$(basename "$0")"

o_rule() {
    "$CC" $CPPFLAGS $CFLAGS -M "$1" || { echo "$1" | sed -e 's/^\(.*\)\.c$/\1.o: \1.c/'; }
    echo "$1" | sed -e 's/^\(.*\)\.c$/\1.o: Makefile config.mk/'
}

ext_rule() {
    o_rule "$2" | sed -e "s/[.]o:/$1:/"
}

lo_rule() {
    ext_rule .lo "$1"
}

prog_rule() {
    { o_rule "$1" || exit 1; } | sed -e 's/[.]o:/:/'
}

c2prog() {
    echo "$@" | sed -e 's/[.]c$//' -e 's/[.]c / /g'
}

c2ext() {
    EXT="$1"; shift
    echo "$@" | sed -e "s/[.]c$/${EXT}/" -e "s/[.]c /${EXT} /g"
}

c2o() {
    c2ext .o "$@"
}

c2lo() {
    c2ext .lo "$@"
}

c2la() {
    c2ext .la "$@"
}

config_asan() {
    echo "int main() { return 0; }" > .config_asan.c
    if $CC $CFLAGS .config_asan.c $LDFLAGS -lasan -o /dev/null 2>/dev/null; then
        HAVE_ASAN=true
    else
        HAVE_ASAN=false
    fi
    rm .config_asan.c
}

config_glfw3() {
    if pkg-config glfw3; then
        CFLAGS="$CFLAGS $(pkg-config --cflags glfw3)"
        LIBS="$LIBS $(pkg-config --libs glfw3)"
        HAVE_GLFW3=Yes
    else
        HAVE_GLFW3=No
    fi
    echo "Checking library glfw3: $HAVE_GLFW3" >&2
    echo "HAVE_GLFW3 = $HAVE_GLFW3" >> ${CONFIG_MK}
}

config_gnu() {
    if grep -q _GNU_SOURCE /usr/include/features.h 2>/dev/null; then
	CFLAGS="$CFLAGS -D_GNU_SOURCE"
    fi
}

config_libbsd() {
    if pkg-config libbsd-overlay; then
	HAVE_LIBBSD=Yes
    else
	HAVE_LIBBSD=No
    fi
}

config_portaudio() {
    if pkg-config portaudio-2.0; then
	CFLAGS="$CFLAGS $(pkg-config --cflags portaudio-2.0)"
	LIBS="$LIBS $(pkg-config --libs portaudio-2.0)"
        HAVE_PORTAUDIO=Yes
    else
        HAVE_PORTAUDIO=No
    fi
    echo "Checking library portaudio: $HAVE_PORTAUDIO" >&2
    echo "HAVE_PORTAUDIO = $HAVE_PORTAUDIO" >> ${CONFIG_MK}
}

config_sndio() {
    if pkg-config sndio; then
	CFLAGS="$CFLAGS $(pkg-config --cflags sndio)"
	LIBS="$LIBS $(pkg-config --libs sndio)"
        HAVE_SNDIO=Yes
    else
	OLD_LIBS="$LIBS"
	LIBS="$LIBS -lsndio"
	if "${CC}" ${CPPFLAGS} ${CFLAGS} ${LDFLAGS} "${SRCDIR}/lib/sndio/check_sndio.c" ${LIBS} -o /dev/null; then
	    HAVE_SNDIO=Yes
	else
	    LIBS="${OLD_LIBS}"
            HAVE_SNDIO=No
	fi
    fi
    echo "Checking library sndio: $HAVE_SNDIO" >&2
    echo "HAVE_SNDIO = $HAVE_SNDIO" >> ${CONFIG_MK}
}

pkg_config() {
    if pkg-config "$1"; then
	CFLAGS="$CFLAGS $(pkg-config --cflags "$1")"
	LIBS="$LIBS $(pkg-config --libs "$1")"
    fi
}

require_pkg_config() {
    if ! which pkg-config >/dev/null; then
        echo "please install pkg-config" >&2
        exit 1
    fi
}

update_config_mk() {
    if ! cmp "${CONFIG_MK}" config.mk >/dev/null 2>&1; then
        mv "${CONFIG_MK}" config.mk
        echo "-> $(echo "$PWD" | sed -e "s|^${SRC_TOP}/||")/config.mk"
    else
        rm "${CONFIG_MK}"
    fi
}

update_sources_mk() {
    if ! cmp "${SOURCES_MK}" sources.mk >/dev/null 2>&1; then
        mv "${SOURCES_MK}" sources.mk
        echo "-> $(echo "$PWD" | sed -e "s|^${SRC_TOP}/||")/sources.mk"
    else
        rm "${SOURCES_MK}"
    fi
}

update_sources_sh() {
    if ! cmp "${SOURCES_SH}" sources.sh >/dev/null 2>&1; then
        mv "${SOURCES_SH}" sources.sh
        echo "-> $(echo "$PWD" | sed -e "s|^${SRC_TOP}/||")/sources.sh"
    else
        rm "${SOURCES_SH}"
    fi
}

CONFIG_MK=config.mk
CONFIG_MK=".config.mk.tmp"
echo "# config.mk generated by configure" > ${CONFIG_MK}

SOURCES_MK=sources.mk
SOURCES_MK=".sources.mk.tmp"
SOURCES_SH=sources.sh
SOURCES_SH=".sources.sh.tmp"

VER=0.4
echo "VER = $VER" >> ${CONFIG_MK}
echo "SRC_TOP = $SRC_TOP" >> ${CONFIG_MK}

if [ "x$AR" = "x" ]; then
    if which ar >/dev/null 2>&1; then
        AR=ar
    fi
fi
if [ "x$CC" = "x" ]; then
    if which cc >/dev/null 2>&1; then
        CC=cc
    elif which gcc >/dev/null 2>&1; then
        CC=gcc
    elif which egcc >/dev/null 2>&1; then
        CC=egcc
    fi
fi
echo "CC = $CC" >> ${CONFIG_MK}

if [ "x$GCOV" = "x" ]; then
    if which gcov >/dev/null 2>&1; then
	GCOV=gcov
        HAVE_GCOV=Yes
    elif which egcov >/dev/null 2>&1; then
	GCOV=egcov
        HAVE_GCOV=No
    fi
    HAVE_GCOV=No
else
    HAVE_GCOV=Yes
fi
echo "HAVE_GCOV = $HAVE_GCOV" >> ${CONFIG_MK}
if [ "x${HAVE_GCOV}" = "xYes" ]; then
    echo "GCOV = $GCOV" >> ${CONFIG_MK}
fi

if [ "x$INSTALL" = "x" ]; then
    if test -x "$(which install)"; then
        INSTALL=install
    fi
fi
echo "INSTALL = $INSTALL" >> ${CONFIG_MK}

if [ "x$LIBTOOL" = "x" ]; then
    if test -x "$(which glibtool 2>/dev/null)"; then
        LIBTOOL="$(which glibtool)"
    elif test -x "/usr/local/bin/libtool"; then
        LIBTOOL="/usr/local/bin/libtool"
    elif test -x "$(which libtool 2>/dev/null)"; then
        LIBTOOL="$(which libtool)"
    else
        LIBTOOL=libtool
    fi
fi
echo "LIBTOOL = $LIBTOOL" >> ${CONFIG_MK}

PREFIX="${PREFIX:-/usr/local}"
echo "PREFIX = $PREFIX" >> ${CONFIG_MK}

if [ "x$OWNER" = "x" ]; then
    OWNER="$(ls -ld "$PREFIX" | tr -s ' ' | cut -d ' ' -f 3)"
fi
echo "OWNER = $OWNER" >> ${CONFIG_MK}

if [ "x$GROUP" = "x" ]; then
    GROUP="$(ls -ld "$PREFIX" | tr -s ' ' | cut -d ' ' -f 4)"
fi
echo "GROUP = $GROUP" >> ${CONFIG_MK}

if [ "x$BINDIR" = "x" ]; then
    BINDIR="${PREFIX}/bin"
fi
echo "BINDIR = $BINDIR" >> ${CONFIG_MK}

if [ "x$LIBDIR" = "x" ]; then
    LIBDIR="${PREFIX}/lib"
fi
echo "LIBDIR = $LIBDIR" >> ${CONFIG_MK}

if [ "x$RTBUF_LIBDIR" = "x" ]; then
    RTBUF_LIBDIR="${LIBDIR}/rtbuf/${VER}"
fi
echo "RTBUF_LIBDIR = $RTBUF_LIBDIR" >> ${CONFIG_MK}

rtbuf_library() {
    RTBUF_LIBRARY_LIBDIR="${RTBUF_LIBDIR}/$1"
    echo "RTBUF_LIBRARY_LIBDIR = $RTBUF_LIBRARY_LIBDIR" >> ${CONFIG_MK}

    LIBRARIES=

    for SRC in $SOURCES; do
        SRC_LO="$(c2ext .main.lo "$SRC")"
        echo >> ${CONFIG_MK}
        ext_rule .main.lo "$SRC" >> ${CONFIG_MK}
        echo "	${LIBTOOL} --tag=CC --mode=compile \${CC} \${CPPFLAGS} \${CFLAGS} -c $SRC -o $SRC_LO" >> ${CONFIG_MK}
        SRC_LA="$(c2la "$SRC")"
        echo >> ${CONFIG_MK}
        echo "$SRC_LA: $SRC_LO" >> ${CONFIG_MK}
        echo "	${LIBTOOL} --tag=CC --mode=link \${CC} -no-undefined -module \${LDFLAGS} $SRC_LO \${LIBS} -o $SRC_LA -rpath ${RTBUF_LIBRARY_LIBDIR}" >> ${CONFIG_MK}
        LIBRARIES="$LIBRARIES $SRC_LA"
    done

    echo >> ${CONFIG_MK}
    echo "libraries:${LIBRARIES}" >> ${CONFIG_MK}

    echo >> ${CONFIG_MK}
    echo "install:${LIBRARIES}" >> ${CONFIG_MK}
    for LIB in $LIBRARIES; do
        echo "	\${INSTALL} -o \${OWNER} -g \${GROUP} -m 0755 -d \${RTBUF_LIBRARY_LIBDIR}" >> ${CONFIG_MK}
        echo "	\${LIBTOOL} --tag=CC --mode=install \${INSTALL} -o \${OWNER} -g \${GROUP} -m 0755 $LIB \${RTBUF_LIBRARY_LIBDIR}/$LIB" >> ${CONFIG_MK}
    done
}

type_prog() {
    TYPE_SRC="$1_type.c"
    TYPE_PROG="$(c2prog "$TYPE_SRC")"
    TYPE_H="${TYPE_PROG}.h"
    echo >> ${CONFIG_MK}
    prog_rule "$TYPE_SRC" >> ${CONFIG_MK}
    echo "	\${CC} \${CPPFLAGS} \${CFLAGS} $TYPE_SRC -o $TYPE_PROG" >> ${CONFIG_MK}
    echo >> ${CONFIG_MK}
    echo "${TYPE_H}: $TYPE_PROG" >> ${CONFIG_MK}
    echo "	./$TYPE_PROG > $TYPE_H" >> ${CONFIG_MK}
    echo >> ${CONFIG_MK}
    echo "CLEANFILES += $TYPE_PROG $TYPE_H" >> ${CONFIG_MK}
    if ! test -f "${TYPE_H}"; then
        touch "${TYPE_H}"
    fi
    TYPES="$TYPES $TYPE_H"
}
